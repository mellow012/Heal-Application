{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/hooks/userRole.ts"],"sourcesContent":["'use client';\n\nimport { useEffect, useState } from 'react';\nimport { useAuth } from '@/app/components/AuthProvide';\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\nimport { db } from '@/lib/firebase';\n\n/**\n * Supported user roles in the system\n */\nexport type UserRole = \n  | 'super_admin' \n  | 'hospital_admin' \n  | 'doctor'\n  | 'nurse'\n  | 'receptionist'\n  | 'staff'\n  | 'patient'\n  | null;\n\n/**\n * User role data with permissions and metadata\n */\nexport interface UserRoleData {\n  role: UserRole;\n  hospitalId: string | null;\n  hospitalRole: string | null;\n  // Permission flags\n  canAccessMedicalData: boolean;\n  canEditMedicalData: boolean;\n  canManageHospital: boolean;\n  canManageStaff: boolean;\n  canViewReports: boolean;\n  // Role type flags\n  isPatient: boolean;\n  isMedicalPersonnel: boolean;\n  isHospitalAdmin: boolean;\n  isSuperAdmin: boolean;\n  isDoctor: boolean;\n  isNurse: boolean;\n  isReceptionist: boolean;\n}\n\n/**\n * Return type for useUserRole hook\n */\ninterface UseUserRoleReturn {\n  userRoleData: UserRoleData | null;\n  loading: boolean;\n  error: string | null;\n  refetch: () => Promise<void>;\n}\n\n/**\n * Custom hook to fetch and manage user role data\n */\nexport function useUserRole(): UseUserRoleReturn {\n  const { user, loading: authLoading } = useAuth();\n  const [userRoleData, setUserRoleData] = useState<UserRoleData | null>(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  /**\n   * Normalize role string to handle different formats\n   * Returns 'patient' as default for unknown/missing roles\n   */\n  const normalizeRole = (role: string | undefined | null): UserRole => {\n    if (!role) {\n      console.log('useUserRole: No role provided, defaulting to patient');\n      return 'patient'; // Default to patient if no role\n    }\n    \n    // Handle different role formats\n    const normalized = role.toLowerCase().replace('-', '_').trim();\n    \n    const validRoles: UserRole[] = [\n      'super_admin',\n      'hospital_admin',\n      'doctor',\n      'nurse',\n      'receptionist',\n      'staff',\n      'patient'\n    ];\n    \n    if (validRoles.includes(normalized as UserRole)) {\n      return normalized as UserRole;\n    }\n    \n    console.log('useUserRole: Invalid role provided, defaulting to patient:', role);\n    return 'patient'; // Default to patient if unknown role\n  };\n\n  /**\n   * Calculate permissions based on role\n   */\n  const calculatePermissions = (role: UserRole): Partial<UserRoleData> => {\n    const isSuperAdmin = role === 'super_admin';\n    const isHospitalAdmin = role === 'hospital_admin';\n    const isDoctor = role === 'doctor';\n    const isNurse = role === 'nurse';\n    const isReceptionist = role === 'receptionist';\n    const isStaff = role === 'staff';\n    const isPatient = role === 'patient';\n    const isMedicalPersonnel = isDoctor || isNurse || isReceptionist;\n\n    return {\n      // Permission flags\n      canAccessMedicalData: isPatient || isMedicalPersonnel || isHospitalAdmin || isSuperAdmin,\n      canEditMedicalData: isDoctor || isNurse || isHospitalAdmin || isSuperAdmin,\n      canManageHospital: isHospitalAdmin || isSuperAdmin,\n      canManageStaff: isHospitalAdmin || isSuperAdmin,\n      canViewReports: isMedicalPersonnel || isHospitalAdmin || isSuperAdmin,\n      // Role type flags\n      isPatient,\n      isMedicalPersonnel,\n      isHospitalAdmin,\n      isSuperAdmin,\n      isDoctor,\n      isNurse,\n      isReceptionist,\n    };\n  };\n\n  /**\n   * Assign default patient role to user in Firestore\n   */\n  const assignDefaultRole = async (userId: string): Promise<void> => {\n    try {\n      console.log('useUserRole: Assigning default patient role to user', userId);\n      \n      await setDoc(doc(db, 'users', userId), {\n        role: 'patient',\n        hospitalId: null,\n        hospitalRole: null,\n        createdAt: new Date().toISOString(),\n        updatedAt: new Date().toISOString(),\n      }, { merge: true }); // Use merge to preserve existing data\n      \n      console.log('useUserRole: Successfully assigned patient role');\n    } catch (err) {\n      console.error('useUserRole: Error assigning default role:', err);\n      throw err;\n    }\n  };\n\n  /**\n   * Fetch user role data from custom claims and Firestore\n   */\n  const fetchUserRole = async (): Promise<void> => {\n    try {\n      // Reset error state\n      setError(null);\n\n      // Wait for auth to finish loading\n      if (authLoading) {\n        console.log('useUserRole: Auth still loading');\n        return;\n      }\n\n      // No user logged in\n      if (!user) {\n        console.log('useUserRole: No user logged in');\n        setUserRoleData(null);\n        setLoading(false);\n        return;\n      }\n\n      console.log('useUserRole: Fetching role for user', user.uid);\n      console.log('useUserRole: Custom claims', user.customClaims);\n\n      // Try to get role from custom claims first (more reliable)\n      let role = user.customClaims?.role as string | undefined;\n      let hospitalId = user.customClaims?.hospitalId as string | undefined;\n      let hospitalRole = user.customClaims?.hospitalRole as string | undefined;\n\n      // Fallback to Firestore if custom claims not available\n      if (!role) {\n        console.log('useUserRole: No role in custom claims, checking Firestore');\n        \n        try {\n          const userDoc = await getDoc(doc(db, 'users', user.uid));\n          \n          if (userDoc.exists()) {\n            const userData = userDoc.data();\n            console.log('useUserRole: Firestore data', userData);\n            \n            role = userData.role;\n            hospitalId = userData.hospitalId;\n            hospitalRole = userData.hospitalRole;\n            \n            // If still no role, assign default patient role\n            if (!role) {\n              console.log('useUserRole: No role in Firestore, assigning default patient role');\n              await assignDefaultRole(user.uid);\n              role = 'patient';\n            }\n          } else {\n            // Document doesn't exist, create it with patient role\n            console.log('useUserRole: User document does not exist, creating with patient role');\n            await assignDefaultRole(user.uid);\n            role = 'patient';\n          }\n        } catch (firestoreError) {\n          console.error('useUserRole: Error fetching Firestore document:', firestoreError);\n          \n          // Even if Firestore fails, assign patient role locally\n          console.log('useUserRole: Firestore error, defaulting to patient role');\n          role = 'patient';\n        }\n      }\n\n      // Normalize the role (will default to patient if invalid)\n      const normalizedRole = normalizeRole(role);\n      console.log('useUserRole: Normalized role', normalizedRole);\n\n      // Calculate permissions based on role\n      const permissions = calculatePermissions(normalizedRole);\n\n      // Create complete role data object\n      const roleData: UserRoleData = {\n        role: normalizedRole,\n        hospitalId: hospitalId || null,\n        hospitalRole: hospitalRole || null,\n        ...permissions,\n      } as UserRoleData;\n\n      console.log('useUserRole: Complete role data', roleData);\n      setUserRoleData(roleData);\n      setError(null);\n    } catch (error: any) {\n      console.error('useUserRole: Unexpected error:', error);\n      \n      // Even on error, provide a fallback patient role\n      console.log('useUserRole: Error occurred, providing fallback patient role');\n      const fallbackRoleData: UserRoleData = {\n        role: 'patient',\n        hospitalId: null,\n        hospitalRole: null,\n        ...calculatePermissions('patient'),\n      } as UserRoleData;\n      \n      setUserRoleData(fallbackRoleData);\n      setError('Failed to fetch complete user data, using default patient role');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Fetch role when user or auth loading state changes\n  useEffect(() => {\n    fetchUserRole();\n  }, [user, authLoading]);\n\n  // Manual refetch function\n  const refetch = async () => {\n    setLoading(true);\n    await fetchUserRole();\n  };\n\n  return {\n    userRoleData,\n    loading: authLoading || loading,\n    error,\n    refetch,\n  };\n}\n\n/**\n * Utility function to check if user has a specific role\n */\nexport function hasRole(userRoleData: UserRoleData | null, role: UserRole): boolean {\n  return userRoleData?.role === role;\n}\n\n/**\n * Utility function to check if user has any of the specified roles\n */\nexport function hasAnyRole(userRoleData: UserRoleData | null, roles: UserRole[]): boolean {\n  return roles.some(role => userRoleData?.role === role);\n}\n\n/**\n * Utility function to check if user belongs to a specific hospital\n */\nexport function belongsToHospital(\n  userRoleData: UserRoleData | null, \n  hospitalId: string\n): boolean {\n  return userRoleData?.hospitalId === hospitalId;\n}\n\n/**\n * Utility function to check if user can perform an action\n */\nexport function canPerformAction(\n  userRoleData: UserRoleData | null,\n  action: 'accessMedical' | 'editMedical' | 'manageHospital' | 'manageStaff' | 'viewReports'\n): boolean {\n  if (!userRoleData) return false;\n\n  switch (action) {\n    case 'accessMedical':\n      return userRoleData.canAccessMedicalData;\n    case 'editMedical':\n      return userRoleData.canEditMedicalData;\n    case 'manageHospital':\n      return userRoleData.canManageHospital;\n    case 'manageStaff':\n      return userRoleData.canManageStaff;\n    case 'viewReports':\n      return userRoleData.canViewReports;\n    default:\n      return false;\n  }\n}\n\n/**\n * Utility function to get user role display name\n */\nexport function getRoleDisplayName(role: UserRole): string {\n  const roleNames: Record<NonNullable<UserRole>, string> = {\n    super_admin: 'Super Administrator',\n    hospital_admin: 'Hospital Administrator',\n    doctor: 'Doctor',\n    nurse: 'Nurse',\n    receptionist: 'Receptionist',\n    staff: 'Staff Member',\n    patient: 'Patient',\n  };\n\n  return role ? roleNames[role] : 'Unknown';\n}"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 263, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/app/login/page.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useAuth } from '../components/AuthProvide';\nimport { useUserRole } from '@/hooks/userRole';\nimport { signInWithEmailAndPassword } from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\nimport { useRouter } from 'next/navigation';\n\n// Skeleton Loader Component\nconst Skeleton = ({ width = '100%', height = '40px', className = '' }) => (\n  <div\n    className={`bg-gray-200 animate-pulse rounded ${className}`}\n    style={{ width, height }}\n  ></div>\n);\n\nexport default function LoginPage() {\n  const { user, loading: authLoading } = useAuth();\n  const { userRoleData, loading: roleLoading } = useUserRole();\n  const router = useRouter();\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [success, setSuccess] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n\n  // Handle redirects based on user role\n  useEffect(() => {\n    const handleRedirect = async () => {\n      if (authLoading || roleLoading || !user || !userRoleData) {\n        console.log('LoginPage: Waiting for auth or role', { \n          authLoading, \n          roleLoading, \n          user: !!user, \n          userRoleData \n        });\n        return;\n      }\n\n      console.log('LoginPage: Role data', userRoleData);\n      const { role, hospitalId } = userRoleData;\n\n      if (role === 'super_admin') {\n        console.log('LoginPage: Redirecting to /admin');\n        router.push('/admin');\n      } else if (role === 'hospital_admin') {\n        // Check if hospital setup is completed\n        try {\n          const token = await user.getIdToken();\n          const response = await fetch(`/api/hospital/${hospitalId}`, {\n            headers: {\n              'Authorization': `Bearer ${token}`,\n            },\n          });\n\n          if (response.ok) {\n            const hospitalData = await response.json();\n            \n            if (!hospitalData.setupCompleted) {\n              console.log('LoginPage: Hospital setup not completed, redirecting to setup');\n              router.push(`/hospital/setup?hospitalId=${hospitalId}`);\n            } else {\n              console.log('LoginPage: Redirecting to /hospital');\n              router.push('/hospital');\n            }\n          } else {\n            console.log('LoginPage: Could not fetch hospital data, redirecting to setup');\n            router.push(`/hospital/setup?hospitalId=${hospitalId}`);\n          }\n        } catch (err) {\n          console.error('LoginPage: Error checking hospital setup status', err);\n          router.push('/hospital');\n        }\n      } else if (role === 'doctor' || role === 'nurse' || role === 'receptionist' || role === 'staff') {\n        console.log('LoginPage: Redirecting hospital personnel to /hospital/staff');\n        router.push('/hospital/staff');\n      } else if (role === 'patient') {\n        console.log('LoginPage: Redirecting to /dashboard');\n        router.push('/dashboard');\n      } else {\n        console.log('LoginPage: Unknown role', role);\n        setError('Unable to determine user role');\n      }\n    };\n\n    handleRedirect();\n  }, [user, userRoleData, authLoading, roleLoading, router]);\n\n  const handleLogin = async (e: React.FormEvent<HTMLFormElement>) => {\n    e.preventDefault();\n    if (!email || !password) {\n      setError('Please provide both email and password');\n      return;\n    }\n    \n    setIsSubmitting(true);\n    setError('');\n    setSuccess('Authenticating...');\n\n    try {\n      console.log('LoginPage: Attempting login for', email);\n      await signInWithEmailAndPassword(auth, email, password);\n      console.log('LoginPage: Login successful');\n      setSuccess('Login successful! Redirecting...');\n    } catch (err: any) {\n      console.error('LoginPage: Login error', err);\n      setSuccess('');\n      \n      // Fixed: Use err.code instead of err directly\n      switch (err.code) {\n        case 'auth/invalid-email':\n          setError('Invalid email format');\n          break;\n        case 'auth/user-not-found':\n          setError('No account found with this email');\n          break;\n        case 'auth/wrong-password':\n          setError('Incorrect password');\n          break;\n        case 'auth/invalid-credential':\n          setError('Incorrect email or password');\n          break;\n        case 'auth/too-many-requests':\n          setError('Too many failed attempts. Please try again later');\n          break;\n        case 'auth/user-disabled':\n          setError('This account has been disabled');\n          break;\n        case 'auth/network-request-failed':\n          setError('Network error. Please check your connection');\n          break;\n        default:\n          setError(err.message || 'Login failed. Please try again');\n      }\n      setIsSubmitting(false);\n    }\n  };\n\n  if (authLoading || roleLoading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n        <div className=\"w-full max-w-md bg-white rounded-lg shadow-lg p-6\">\n          <Skeleton width=\"200px\" height=\"24px\" className=\"mb-6 mx-auto\" />\n          <div className=\"flex flex-col gap-4\">\n            <Skeleton height=\"48px\" className=\"rounded-md\" />\n            <Skeleton height=\"48px\" className=\"rounded-md\" />\n            <Skeleton height=\"48px\" className=\"rounded-md\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex flex-col items-center justify-center min-h-screen bg-gray-100 p-4\">\n      <div className=\"w-full max-w-md bg-white rounded-lg shadow-lg p-6 relative\">\n        <h1 className=\"text-2xl font-bold text-center text-gray-800 mb-6\">\n          Log In to Heal E-Health\n        </h1>\n        <form onSubmit={handleLogin} className=\"flex flex-col gap-4\">\n          {isSubmitting && (\n            <div className=\"absolute inset-0 bg-white bg-opacity-90 flex items-center justify-center rounded-lg z-10\">\n              <div className=\"flex flex-col items-center gap-3\">\n                <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-blue-500\"></div>\n                <p className=\"text-sm text-gray-600\">{success || 'Logging in...'}</p>\n              </div>\n            </div>\n          )}\n          <div>\n            <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Email\n            </label>\n            <input\n              id=\"email\"\n              type=\"email\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n              placeholder=\"Enter your email\"\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n              required\n              disabled={isSubmitting}\n            />\n          </div>\n          <div>\n            <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Password\n            </label>\n            <input\n              id=\"password\"\n              type=\"password\"\n              value={password}\n              onChange={(e) => setPassword(e.target.value)}\n              placeholder=\"Enter your password\"\n              className=\"w-full p-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 transition\"\n              required\n              disabled={isSubmitting}\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className=\"w-full p-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-md hover:from-blue-600 hover:to-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 transition disabled:bg-gray-400 disabled:cursor-not-allowed\"\n            disabled={isSubmitting}\n          >\n            {isSubmitting ? 'Logging In...' : 'Log In'}\n          </button>\n          {error && (\n            <div className=\"p-3 bg-red-50 border border-red-200 rounded-md\">\n              <p className=\"text-red-600 text-sm text-center\">{error}</p>\n            </div>\n          )}\n          {success && !error && (\n            <div className=\"p-3 bg-green-50 border border-green-200 rounded-md\">\n              <p className=\"text-green-600 text-sm text-center\">{success}</p>\n            </div>\n          )}\n        </form>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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","debugId":null}}]
}