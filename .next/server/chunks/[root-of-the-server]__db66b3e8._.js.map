{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/lib/firebaseAdmin.ts"],"sourcesContent":["/**\n * Firebase Admin SDK Configuration\n * \n * This file initializes Firebase Admin SDK for server-side operations.\n * It handles authentication, Firestore database access, and provides\n * utility functions for common operations.\n * \n * @module firebaseAdmin\n */\n\nimport admin from 'firebase-admin';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\n\n/**\n * Helper function to properly format the private key\n * Handles various key formats from environment variables\n */\nfunction formatPrivateKey(key: string | undefined): string {\n  if (!key) {\n    throw new Error('FIREBASE_PRIVATE_KEY environment variable is not set');\n  }\n  \n  // Handle different key formats\n  return key\n    .replace(/\\\\n/g, '\\n')  // Replace literal \\n with actual newlines\n    .replace(/\"/g, '')      // Remove any quotes\n    .trim();                // Remove extra whitespace\n}\n\n/**\n * Validate all required Firebase Admin environment variables\n */\nfunction validateEnvironmentVariables(): void {\n  const requiredVars = {\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_CLIENT_EMAIL: process.env.FIREBASE_CLIENT_EMAIL,\n    FIREBASE_PRIVATE_KEY: process.env.FIREBASE_PRIVATE_KEY,\n  };\n\n  const missingVars = Object.entries(requiredVars)\n    .filter(([_, value]) => !value)\n    .map(([key]) => key);\n\n  if (missingVars.length > 0) {\n    throw new Error(\n      `Missing required environment variables: ${missingVars.join(', ')}\\n` +\n      'Please check your .env.local file.'\n    );\n  }\n}\n\n/**\n * Initialize Firebase Admin SDK\n * Only initializes once, even if imported multiple times\n */\nfunction initializeFirebaseAdmin() {\n  // Check if already initialized\n  if (admin.apps.length > 0) {\n    console.log('Firebase Admin already initialized, using existing instance');\n    return admin.apps[0];\n  }\n\n  try {\n    // Validate environment variables\n    validateEnvironmentVariables();\n\n    // Initialize Firebase Admin\n    const app = admin.initializeApp({\n      credential: admin.credential.cert({\n        projectId: process.env.FIREBASE_PROJECT_ID!,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL!,\n        privateKey: formatPrivateKey(process.env.FIREBASE_PRIVATE_KEY),\n      }),\n    });\n\n    console.log('✅ Firebase Admin initialized successfully');\n    console.log('Project ID:', process.env.FIREBASE_PROJECT_ID);\n    \n    return app;\n  } catch (error: any) {\n    console.error('❌ Firebase Admin initialization failed:', error.message);\n    \n    // Provide helpful error messages\n    if (error.message.includes('FIREBASE_PRIVATE_KEY')) {\n      console.error('\\n💡 Tip: Make sure your private key is properly formatted in .env.local');\n      console.error('It should look like: FIREBASE_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\\\nYour-Key\\\\n-----END PRIVATE KEY-----\\\\n\"');\n    }\n    \n    throw error;\n  }\n}\n\n// Initialize the app\nconst app = initializeFirebaseAdmin();\n\n// Export Firebase Admin services\nexport const adminAuth = getAuth(app);\nexport const adminDb = getFirestore(app);\n\n// Export the app instance (useful for testing or advanced usage)\nexport const adminApp = app;\n\n// Export default for convenience\nexport default admin;\n\n/**\n * Type-safe FieldValue export\n * Use this for timestamps and other Firestore field values\n */\nexport { FieldValue } from 'firebase-admin/firestore';\n\n/**\n * Utility function to check if Firebase Admin is properly initialized\n */\nexport function isFirebaseAdminInitialized(): boolean {\n  return admin.apps.length > 0;\n}\n\n/**\n * Utility function to get server timestamp\n */\nexport function getServerTimestamp() {\n  return admin.firestore.FieldValue.serverTimestamp();\n}"],"names":[],"mappings":"AAAA;;;;;;;;CAQC;;;;;;;;AAED;AACA;AACA;;;;;;;;;AAEA;;;CAGC,GACD,SAAS,iBAAiB,GAAuB;IAC/C,IAAI,CAAC,KAAK;QACR,MAAM,IAAI,MAAM;IAClB;IAEA,+BAA+B;IAC/B,OAAO,IACJ,OAAO,CAAC,QAAQ,MAAO,0CAA0C;KACjE,OAAO,CAAC,MAAM,IAAS,oBAAoB;KAC3C,IAAI,IAAmB,0BAA0B;AACtD;AAEA;;CAEC,GACD,SAAS;IACP,MAAM,eAAe;QACnB,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;QACpD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IACxD;IAEA,MAAM,cAAc,OAAO,OAAO,CAAC,cAChC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,GAAK,CAAC,OACxB,GAAG,CAAC,CAAC,CAAC,IAAI,GAAK;IAElB,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,IAAI,MACR,CAAC,wCAAwC,EAAE,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC,GACrE;IAEJ;AACF;AAEA;;;CAGC,GACD,SAAS;IACP,+BAA+B;IAC/B,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACzB,QAAQ,GAAG,CAAC;QACZ,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,EAAE;IACtB;IAEA,IAAI;QACF,iCAAiC;QACjC;QAEA,4BAA4B;QAC5B,MAAM,MAAM,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YAC9B,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;gBAChC,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,iBAAiB,QAAQ,GAAG,CAAC,oBAAoB;YAC/D;QACF;QAEA,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,eAAe,QAAQ,GAAG,CAAC,mBAAmB;QAE1D,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QAEtE,iCAAiC;QACjC,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,yBAAyB;YAClD,QAAQ,KAAK,CAAC;YACd,QAAQ,KAAK,CAAC;QAChB;QAEA,MAAM;IACR;AACF;AAEA,qBAAqB;AACrB,MAAM,MAAM;AAGL,MAAM,YAAY,CAAA,GAAA,kJAAA,CAAA,UAAO,AAAD,EAAE;AAC1B,MAAM,UAAU,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD,EAAE;AAG7B,MAAM,WAAW;uCAGT,2HAAA,CAAA,UAAK;;AAWb,SAAS;IACd,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG;AAC7B;AAKO,SAAS;IACd,OAAO,2HAAA,CAAA,UAAK,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe;AACnD","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/app/api/hospital/%5BhospitalId%5D/staff/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { adminAuth, adminDb } from '@/lib/firebaseAdmin';\r\n\r\nexport async function GET(\r\n  request: NextRequest,\r\n  props: { params: Promise<{ hospitalId: string }> }\r\n) {\r\n  try {\r\n    // IMPORTANT: In Next.js 15, params is a Promise and must be awaited\r\n    const params = await props.params;\r\n    const { hospitalId } = params;\r\n\r\n    // Get authorization token\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - No token provided' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const token = authHeader.split('Bearer ')[1];\r\n    const decodedToken = await adminAuth.verifyIdToken(token);\r\n    const userRole = decodedToken.role;\r\n    const userHospitalId = decodedToken.hospitalId;\r\n\r\n    if (!hospitalId) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Hospital ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Check authorization\r\n    const hasAccess =\r\n      userRole === 'super_admin' ||\r\n      (userRole === 'hospital_admin' && userHospitalId === hospitalId) ||\r\n      userHospitalId === hospitalId;\r\n\r\n    if (!hasAccess) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - You do not have access to this hospital staff' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    // Fetch staff members from hospital's staff subcollection\r\n    const staffSnapshot = await adminDb\r\n      .collection('hospitals')\r\n      .doc(hospitalId)\r\n      .collection('staff')\r\n      .get();\r\n\r\n    const staffMembers = staffSnapshot.docs.map(doc => ({\r\n      id: doc.id,\r\n      ...doc.data(),\r\n    }));\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      staff: staffMembers,\r\n      count: staffMembers.length,\r\n    });\r\n  } catch (error: any) {\r\n    console.error('Error fetching staff members:', error);\r\n\r\n    let errorMessage = 'Failed to fetch staff members';\r\n    if (error.code === 'auth/id-token-expired') {\r\n      errorMessage = 'Your session has expired. Please log in again.';\r\n    } else if (error.code === 'auth/argument-error') {\r\n      errorMessage = 'Invalid authentication token';\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: errorMessage },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST() {\r\n  return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });\r\n}\r\n\r\nexport async function PUT() {\r\n  return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });\r\n}\r\n\r\nexport async function DELETE() {\r\n  return NextResponse.json({ error: 'Method not allowed' }, { status: 405 });\r\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;;;;;;;;AAEO,eAAe,IACpB,OAAoB,EACpB,KAAkD;IAElD,IAAI;QACF,oEAAoE;QACpE,MAAM,SAAS,MAAM,MAAM,MAAM;QACjC,MAAM,EAAE,UAAU,EAAE,GAAG;QAEvB,0BAA0B;QAC1B,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAmC,GAC5D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,WAAW,KAAK,CAAC,UAAU,CAAC,EAAE;QAC5C,MAAM,eAAe,MAAM,6IAAA,CAAA,YAAS,CAAC,aAAa,CAAC;QACnD,MAAM,WAAW,aAAa,IAAI;QAClC,MAAM,iBAAiB,aAAa,UAAU;QAE9C,IAAI,CAAC,YAAY;YACf,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA0B,GACnD;gBAAE,QAAQ;YAAI;QAElB;QAEA,sBAAsB;QACtB,MAAM,YACJ,aAAa,iBACZ,aAAa,oBAAoB,mBAAmB,cACrD,mBAAmB;QAErB,IAAI,CAAC,WAAW;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA+D,GACxF;gBAAE,QAAQ;YAAI;QAElB;QAEA,0DAA0D;QAC1D,MAAM,gBAAgB,MAAM,6IAAA,CAAA,UAAO,CAChC,UAAU,CAAC,aACX,GAAG,CAAC,YACJ,UAAU,CAAC,SACX,GAAG;QAEN,MAAM,eAAe,cAAc,IAAI,CAAC,GAAG,CAAC,CAAA,MAAO,CAAC;gBAClD,IAAI,IAAI,EAAE;gBACV,GAAG,IAAI,IAAI,EAAE;YACf,CAAC;QAED,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,OAAO;YACP,OAAO,aAAa,MAAM;QAC5B;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,iCAAiC;QAE/C,IAAI,eAAe;QACnB,IAAI,MAAM,IAAI,KAAK,yBAAyB;YAC1C,eAAe;QACjB,OAAO,IAAI,MAAM,IAAI,KAAK,uBAAuB;YAC/C,eAAe;QACjB;QAEA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO;QAAa,GACtC;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAqB,GAAG;QAAE,QAAQ;IAAI;AAC1E;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAqB,GAAG;QAAE,QAAQ;IAAI;AAC1E;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QAAE,OAAO;IAAqB,GAAG;QAAE,QAAQ;IAAI;AAC1E","debugId":null}}]
}