{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/lib/firebaseAdmin.ts"],"sourcesContent":["/**\n * Firebase Admin SDK Configuration\n * \n * This file initializes Firebase Admin SDK for server-side operations.\n * It handles authentication, Firestore database access, and provides\n * utility functions for common operations.\n * \n * @module firebaseAdmin\n */\n\nimport admin from 'firebase-admin';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\n\n/**\n * Helper function to properly format the private key\n * Handles various key formats from environment variables\n */\nfunction formatPrivateKey(key: string | undefined): string {\n  if (!key) {\n    throw new Error('FIREBASE_PRIVATE_KEY environment variable is not set');\n  }\n  \n  // Handle different key formats\n  return key\n    .replace(/\\\\n/g, '\\n')  // Replace literal \\n with actual newlines\n    .replace(/\"/g, '')      // Remove any quotes\n    .trim();                // Remove extra whitespace\n}\n\n/**\n * Validate all required Firebase Admin environment variables\n */\nfunction validateEnvironmentVariables(): void {\n  const requiredVars = {\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_CLIENT_EMAIL: process.env.FIREBASE_CLIENT_EMAIL,\n    FIREBASE_PRIVATE_KEY: process.env.FIREBASE_PRIVATE_KEY,\n  };\n\n  const missingVars = Object.entries(requiredVars)\n    .filter(([_, value]) => !value)\n    .map(([key]) => key);\n\n  if (missingVars.length > 0) {\n    throw new Error(\n      `Missing required environment variables: ${missingVars.join(', ')}\\n` +\n      'Please check your .env.local file.'\n    );\n  }\n}\n\n/**\n * Initialize Firebase Admin SDK\n * Only initializes once, even if imported multiple times\n */\nfunction initializeFirebaseAdmin() {\n  // Check if already initialized\n  if (admin.apps.length > 0) {\n    console.log('Firebase Admin already initialized, using existing instance');\n    return admin.apps[0];\n  }\n\n  try {\n    // Validate environment variables\n    validateEnvironmentVariables();\n\n    // Initialize Firebase Admin\n    const app = admin.initializeApp({\n      credential: admin.credential.cert({\n        projectId: process.env.FIREBASE_PROJECT_ID!,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL!,\n        privateKey: formatPrivateKey(process.env.FIREBASE_PRIVATE_KEY),\n      }),\n    });\n\n    console.log('✅ Firebase Admin initialized successfully');\n    console.log('Project ID:', process.env.FIREBASE_PROJECT_ID);\n    \n    return app;\n  } catch (error: any) {\n    console.error('❌ Firebase Admin initialization failed:', error.message);\n    \n    // Provide helpful error messages\n    if (error.message.includes('FIREBASE_PRIVATE_KEY')) {\n      console.error('\\n💡 Tip: Make sure your private key is properly formatted in .env.local');\n      console.error('It should look like: FIREBASE_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\\\nYour-Key\\\\n-----END PRIVATE KEY-----\\\\n\"');\n    }\n    \n    throw error;\n  }\n}\n\n// Initialize the app\nconst app = initializeFirebaseAdmin();\n\n// Export Firebase Admin services\nexport const adminAuth = getAuth(app);\nexport const adminDb = getFirestore(app);\n\n// Export the app instance (useful for testing or advanced usage)\nexport const adminApp = app;\n\n// Export default for convenience\nexport default admin;\n\n/**\n * Type-safe FieldValue export\n * Use this for timestamps and other Firestore field values\n */\nexport { FieldValue } from 'firebase-admin/firestore';\n\n/**\n * Utility function to check if Firebase Admin is properly initialized\n */\nexport function isFirebaseAdminInitialized(): boolean {\n  return admin.apps.length > 0;\n}\n\n/**\n * Utility function to get server timestamp\n */\nexport function getServerTimestamp() {\n  return admin.firestore.FieldValue.serverTimestamp();\n}"],"names":[],"mappings":"AAAA;;;;;;;;CAQC;;;;;;;;AAED;AACA;AACA;;;;;;;;;AAEA;;;CAGC,GACD,SAAS,iBAAiB,GAAuB;IAC/C,IAAI,CAAC,KAAK;QACR,MAAM,IAAI,MAAM;IAClB;IAEA,+BAA+B;IAC/B,OAAO,IACJ,OAAO,CAAC,QAAQ,MAAO,0CAA0C;KACjE,OAAO,CAAC,MAAM,IAAS,oBAAoB;KAC3C,IAAI,IAAmB,0BAA0B;AACtD;AAEA;;CAEC,GACD,SAAS;IACP,MAAM,eAAe;QACnB,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;QACpD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IACxD;IAEA,MAAM,cAAc,OAAO,OAAO,CAAC,cAChC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,GAAK,CAAC,OACxB,GAAG,CAAC,CAAC,CAAC,IAAI,GAAK;IAElB,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,IAAI,MACR,CAAC,wCAAwC,EAAE,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC,GACrE;IAEJ;AACF;AAEA;;;CAGC,GACD,SAAS;IACP,+BAA+B;IAC/B,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACzB,QAAQ,GAAG,CAAC;QACZ,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,EAAE;IACtB;IAEA,IAAI;QACF,iCAAiC;QACjC;QAEA,4BAA4B;QAC5B,MAAM,MAAM,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YAC9B,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;gBAChC,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,iBAAiB,QAAQ,GAAG,CAAC,oBAAoB;YAC/D;QACF;QAEA,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,eAAe,QAAQ,GAAG,CAAC,mBAAmB;QAE1D,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QAEtE,iCAAiC;QACjC,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,yBAAyB;YAClD,QAAQ,KAAK,CAAC;YACd,QAAQ,KAAK,CAAC;QAChB;QAEA,MAAM;IACR;AACF;AAEA,qBAAqB;AACrB,MAAM,MAAM;AAGL,MAAM,YAAY,CAAA,GAAA,kJAAA,CAAA,UAAO,AAAD,EAAE;AAC1B,MAAM,UAAU,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD,EAAE;AAG7B,MAAM,WAAW;uCAGT,2HAAA,CAAA,UAAK;;AAWb,SAAS;IACd,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG;AAC7B;AAKO,SAAS;IACd,OAAO,2HAAA,CAAA,UAAK,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe;AACnD","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/app/api/hospital/%5BhospitalId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { adminAuth, adminDb } from '@/lib/firebaseAdmin';\r\n\r\n// GET: Fetch hospital data\r\nexport async function GET(\r\n  request: NextRequest,\r\n  props: { params: Promise<{ hospitalId: string }> }\r\n) {\r\n  try {\r\n    // IMPORTANT: In Next.js 15, params is a Promise and must be awaited\r\n    const params = await props.params;\r\n    const hospitalId = params.hospitalId;\r\n\r\n    console.log('=== GET Hospital API Called ===');\r\n    console.log('Hospital ID:', hospitalId);\r\n\r\n    // Get authorization token\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      console.error('No authorization header');\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - No token provided' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const token = authHeader.split('Bearer ')[1];\r\n    console.log('Token received:', token.substring(0, 20) + '...');\r\n    \r\n    let decodedToken;\r\n    try {\r\n      decodedToken = await adminAuth.verifyIdToken(token);\r\n      console.log('Token verified for user:', decodedToken.uid);\r\n      console.log('User role:', decodedToken.role);\r\n      console.log('User hospitalId:', decodedToken.hospitalId);\r\n    } catch (error: any) {\r\n      console.error('Token verification failed:', error.code, error.message);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid or expired token' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = decodedToken.uid;\r\n\r\n    if (!hospitalId) {\r\n      console.error('Hospital ID is missing');\r\n      return NextResponse.json(\r\n        { success: false, error: 'Hospital ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('Fetching hospital from Firestore:', hospitalId);\r\n\r\n    // Get hospital document\r\n    const hospitalDoc = await adminDb.collection('hospitals').doc(hospitalId).get();\r\n\r\n    if (!hospitalDoc.exists) {\r\n      console.error('Hospital not found in Firestore:', hospitalId);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Hospital not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const hospitalData = hospitalDoc.data();\r\n    console.log('Hospital data retrieved:', {\r\n      name: hospitalData?.name,\r\n      adminUserId: hospitalData?.adminUserId,\r\n      setupCompleted: hospitalData?.setupCompleted,\r\n    });\r\n\r\n    // Check if user has access to this hospital\r\n    const userRole = decodedToken.role;\r\n    const userHospitalId = decodedToken.hospitalId;\r\n\r\n    const hasAccess = \r\n      userRole === 'super_admin' ||\r\n      (userRole === 'hospital_admin' && hospitalData?.adminUserId === userId) ||\r\n      (userHospitalId === hospitalId);\r\n\r\n    if (!hasAccess) {\r\n      console.error('Access denied. User:', userId, 'Role:', userRole, 'Hospital Admin:', hospitalData?.adminUserId);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - You do not have access to this hospital' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    console.log('Access granted. Returning hospital data');\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      id: hospitalId,\r\n      name: hospitalData?.name || '',\r\n      email: hospitalData?.email || '',\r\n      phone: hospitalData?.phone || '',\r\n      address: hospitalData?.address || '',\r\n      city: hospitalData?.city || '',\r\n      country: hospitalData?.country || '',\r\n      postalCode: hospitalData?.postalCode || '',\r\n      website: hospitalData?.website || '',\r\n      description: hospitalData?.description || '',\r\n      departments: hospitalData?.departments || [],\r\n      status: hospitalData?.status || 'pending',\r\n      setupCompleted: hospitalData?.setupCompleted || false,\r\n      adminUserId: hospitalData?.adminUserId,\r\n      createdAt: hospitalData?.createdAt,\r\n      updatedAt: hospitalData?.updatedAt,\r\n    });\r\n  } catch (error: any) {\r\n    console.error('=== Error in GET Hospital API ===');\r\n    console.error('Error:', error);\r\n    console.error('Error code:', error.code);\r\n    console.error('Error message:', error.message);\r\n    console.error('Stack:', error.stack);\r\n\r\n    let errorMessage = 'Failed to fetch hospital data';\r\n    let statusCode = 500;\r\n\r\n    if (error.code === 'auth/id-token-expired') {\r\n      errorMessage = 'Your session has expired. Please log in again.';\r\n      statusCode = 401;\r\n    } else if (error.code === 'auth/argument-error') {\r\n      errorMessage = 'Invalid authentication token';\r\n      statusCode = 401;\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: errorMessage },\r\n      { status: statusCode }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT: Update hospital data\r\nexport async function PUT(\r\n  request: NextRequest,\r\n  { params }: { params: { hospitalId: string } }\r\n) {\r\n  try {\r\n    // Get hospitalId from params\r\n    const hospitalId = params.hospitalId;\r\n\r\n    console.log('=== PUT Hospital API Called ===');\r\n    console.log('Hospital ID:', hospitalId);\r\n\r\n    // Get authorization token\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      console.error('No authorization header');\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - No token provided' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const token = authHeader.split('Bearer ')[1];\r\n    \r\n    let decodedToken;\r\n    try {\r\n      decodedToken = await adminAuth.verifyIdToken(token);\r\n      console.log('Token verified for user:', decodedToken.uid);\r\n    } catch (error: any) {\r\n      console.error('Token verification failed:', error);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid or expired token' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = decodedToken.uid;\r\n\r\n    if (!hospitalId) {\r\n      console.error('Hospital ID is missing');\r\n      return NextResponse.json(\r\n        { success: false, error: 'Hospital ID is required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    console.log('Updating hospital:', hospitalId);\r\n\r\n    // Get hospital document\r\n    const hospitalDoc = await adminDb.collection('hospitals').doc(hospitalId).get();\r\n\r\n    if (!hospitalDoc.exists) {\r\n      console.error('Hospital not found:', hospitalId);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Hospital not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const hospitalData = hospitalDoc.data();\r\n\r\n    // Verify user is the hospital admin or super admin\r\n    const userRole = decodedToken.role;\r\n    const isAuthorized = \r\n      userRole === 'super_admin' ||\r\n      (userRole === 'hospital_admin' && hospitalData?.adminUserId === userId);\r\n\r\n    if (!isAuthorized) {\r\n      console.error('Update unauthorized for user:', userId);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - Only hospital admin can update this hospital' },\r\n        { status: 403 }\r\n      );\r\n    }\r\n\r\n    const body = await request.json();\r\n    console.log('Update body:', body);\r\n\r\n    const {\r\n      name,\r\n      phone,\r\n      address,\r\n      city,\r\n      country,\r\n      postalCode,\r\n      website,\r\n      description,\r\n      departments,\r\n      setupCompleted,\r\n    } = body;\r\n\r\n    // Validate required fields for setup completion\r\n    if (setupCompleted && (!name?.trim() || !address?.trim() || !city?.trim() || !departments || departments.length === 0)) {\r\n      return NextResponse.json(\r\n        { success: false, error: 'Name, address, city, and at least one department are required' },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Prepare update data\r\n    const updateData: any = {\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    if (name !== undefined) updateData.name = name.trim();\r\n    if (phone !== undefined) updateData.phone = phone.trim();\r\n    if (address !== undefined) updateData.address = address.trim();\r\n    if (city !== undefined) updateData.city = city.trim();\r\n    if (country !== undefined) updateData.country = country.trim();\r\n    if (postalCode !== undefined) updateData.postalCode = postalCode.trim();\r\n    if (website !== undefined) updateData.website = website.trim();\r\n    if (description !== undefined) updateData.description = description.trim();\r\n    if (departments !== undefined) updateData.departments = departments;\r\n    \r\n    if (setupCompleted !== undefined) {\r\n      updateData.setupCompleted = setupCompleted;\r\n      if (setupCompleted) {\r\n        updateData.status = 'active';\r\n      }\r\n    }\r\n\r\n    console.log('Updating with data:', updateData);\r\n\r\n    // Update hospital document\r\n    await adminDb.collection('hospitals').doc(hospitalId).update(updateData);\r\n\r\n    console.log('Hospital updated successfully:', hospitalId);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Hospital information updated successfully',\r\n      hospitalId,\r\n    });\r\n  } catch (error: any) {\r\n    console.error('=== Error in PUT Hospital API ===');\r\n    console.error('Error:', error);\r\n    console.error('Error message:', error.message);\r\n\r\n    let errorMessage = 'Failed to update hospital data';\r\n    if (error.code === 'auth/id-token-expired') {\r\n      errorMessage = 'Your session has expired. Please log in again.';\r\n    } else if (error.code === 'auth/argument-error') {\r\n      errorMessage = 'Invalid authentication token';\r\n    } else if (error.message) {\r\n      errorMessage = error.message;\r\n    }\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: errorMessage },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST() {\r\n  return NextResponse.json({ \r\n    success: false, \r\n    error: 'Method not allowed. Use GET to fetch or PUT to update.' \r\n  }, { status: 405 });\r\n}\r\n\r\nexport async function DELETE() {\r\n  return NextResponse.json({ \r\n    success: false, \r\n    error: 'Method not allowed.' \r\n  }, { status: 405 });\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}