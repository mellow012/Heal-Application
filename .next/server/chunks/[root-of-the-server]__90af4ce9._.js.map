{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 90, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/lib/firebaseAdmin.ts"],"sourcesContent":["/**\n * Firebase Admin SDK Configuration\n * \n * This file initializes Firebase Admin SDK for server-side operations.\n * It handles authentication, Firestore database access, and provides\n * utility functions for common operations.\n * \n * @module firebaseAdmin\n */\n\nimport admin from 'firebase-admin';\nimport { getAuth } from 'firebase-admin/auth';\nimport { getFirestore } from 'firebase-admin/firestore';\n\n/**\n * Helper function to properly format the private key\n * Handles various key formats from environment variables\n */\nfunction formatPrivateKey(key: string | undefined): string {\n  if (!key) {\n    throw new Error('FIREBASE_PRIVATE_KEY environment variable is not set');\n  }\n  \n  // Handle different key formats\n  return key\n    .replace(/\\\\n/g, '\\n')  // Replace literal \\n with actual newlines\n    .replace(/\"/g, '')      // Remove any quotes\n    .trim();                // Remove extra whitespace\n}\n\n/**\n * Validate all required Firebase Admin environment variables\n */\nfunction validateEnvironmentVariables(): void {\n  const requiredVars = {\n    FIREBASE_PROJECT_ID: process.env.FIREBASE_PROJECT_ID,\n    FIREBASE_CLIENT_EMAIL: process.env.FIREBASE_CLIENT_EMAIL,\n    FIREBASE_PRIVATE_KEY: process.env.FIREBASE_PRIVATE_KEY,\n  };\n\n  const missingVars = Object.entries(requiredVars)\n    .filter(([_, value]) => !value)\n    .map(([key]) => key);\n\n  if (missingVars.length > 0) {\n    throw new Error(\n      `Missing required environment variables: ${missingVars.join(', ')}\\n` +\n      'Please check your .env.local file.'\n    );\n  }\n}\n\n/**\n * Initialize Firebase Admin SDK\n * Only initializes once, even if imported multiple times\n */\nfunction initializeFirebaseAdmin() {\n  // Check if already initialized\n  if (admin.apps.length > 0) {\n    console.log('Firebase Admin already initialized, using existing instance');\n    return admin.apps[0];\n  }\n\n  try {\n    // Validate environment variables\n    validateEnvironmentVariables();\n\n    // Initialize Firebase Admin\n    const app = admin.initializeApp({\n      credential: admin.credential.cert({\n        projectId: process.env.FIREBASE_PROJECT_ID!,\n        clientEmail: process.env.FIREBASE_CLIENT_EMAIL!,\n        privateKey: formatPrivateKey(process.env.FIREBASE_PRIVATE_KEY),\n      }),\n    });\n\n    console.log('✅ Firebase Admin initialized successfully');\n    console.log('Project ID:', process.env.FIREBASE_PROJECT_ID);\n    \n    return app;\n  } catch (error: any) {\n    console.error('❌ Firebase Admin initialization failed:', error.message);\n    \n    // Provide helpful error messages\n    if (error.message.includes('FIREBASE_PRIVATE_KEY')) {\n      console.error('\\n💡 Tip: Make sure your private key is properly formatted in .env.local');\n      console.error('It should look like: FIREBASE_PRIVATE_KEY=\"-----BEGIN PRIVATE KEY-----\\\\nYour-Key\\\\n-----END PRIVATE KEY-----\\\\n\"');\n    }\n    \n    throw error;\n  }\n}\n\n// Initialize the app\nconst app = initializeFirebaseAdmin();\n\n// Export Firebase Admin services\nexport const adminAuth = getAuth(app);\nexport const adminDb = getFirestore(app);\n\n// Export the app instance (useful for testing or advanced usage)\nexport const adminApp = app;\n\n// Export default for convenience\nexport default admin;\n\n/**\n * Type-safe FieldValue export\n * Use this for timestamps and other Firestore field values\n */\nexport { FieldValue } from 'firebase-admin/firestore';\n\n/**\n * Utility function to check if Firebase Admin is properly initialized\n */\nexport function isFirebaseAdminInitialized(): boolean {\n  return admin.apps.length > 0;\n}\n\n/**\n * Utility function to get server timestamp\n */\nexport function getServerTimestamp() {\n  return admin.firestore.FieldValue.serverTimestamp();\n}"],"names":[],"mappings":"AAAA;;;;;;;;CAQC;;;;;;;;AAED;AACA;AACA;;;;;;;;;AAEA;;;CAGC,GACD,SAAS,iBAAiB,GAAuB;IAC/C,IAAI,CAAC,KAAK;QACR,MAAM,IAAI,MAAM;IAClB;IAEA,+BAA+B;IAC/B,OAAO,IACJ,OAAO,CAAC,QAAQ,MAAO,0CAA0C;KACjE,OAAO,CAAC,MAAM,IAAS,oBAAoB;KAC3C,IAAI,IAAmB,0BAA0B;AACtD;AAEA;;CAEC,GACD,SAAS;IACP,MAAM,eAAe;QACnB,qBAAqB,QAAQ,GAAG,CAAC,mBAAmB;QACpD,uBAAuB,QAAQ,GAAG,CAAC,qBAAqB;QACxD,sBAAsB,QAAQ,GAAG,CAAC,oBAAoB;IACxD;IAEA,MAAM,cAAc,OAAO,OAAO,CAAC,cAChC,MAAM,CAAC,CAAC,CAAC,GAAG,MAAM,GAAK,CAAC,OACxB,GAAG,CAAC,CAAC,CAAC,IAAI,GAAK;IAElB,IAAI,YAAY,MAAM,GAAG,GAAG;QAC1B,MAAM,IAAI,MACR,CAAC,wCAAwC,EAAE,YAAY,IAAI,CAAC,MAAM,EAAE,CAAC,GACrE;IAEJ;AACF;AAEA;;;CAGC,GACD,SAAS;IACP,+BAA+B;IAC/B,IAAI,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG,GAAG;QACzB,QAAQ,GAAG,CAAC;QACZ,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,EAAE;IACtB;IAEA,IAAI;QACF,iCAAiC;QACjC;QAEA,4BAA4B;QAC5B,MAAM,MAAM,2HAAA,CAAA,UAAK,CAAC,aAAa,CAAC;YAC9B,YAAY,2HAAA,CAAA,UAAK,CAAC,UAAU,CAAC,IAAI,CAAC;gBAChC,WAAW,QAAQ,GAAG,CAAC,mBAAmB;gBAC1C,aAAa,QAAQ,GAAG,CAAC,qBAAqB;gBAC9C,YAAY,iBAAiB,QAAQ,GAAG,CAAC,oBAAoB;YAC/D;QACF;QAEA,QAAQ,GAAG,CAAC;QACZ,QAAQ,GAAG,CAAC,eAAe,QAAQ,GAAG,CAAC,mBAAmB;QAE1D,OAAO;IACT,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC,2CAA2C,MAAM,OAAO;QAEtE,iCAAiC;QACjC,IAAI,MAAM,OAAO,CAAC,QAAQ,CAAC,yBAAyB;YAClD,QAAQ,KAAK,CAAC;YACd,QAAQ,KAAK,CAAC;QAChB;QAEA,MAAM;IACR;AACF;AAEA,qBAAqB;AACrB,MAAM,MAAM;AAGL,MAAM,YAAY,CAAA,GAAA,kJAAA,CAAA,UAAO,AAAD,EAAE;AAC1B,MAAM,UAAU,CAAA,GAAA,4JAAA,CAAA,eAAY,AAAD,EAAE;AAG7B,MAAM,WAAW;uCAGT,2HAAA,CAAA,UAAK;;AAWb,SAAS;IACd,OAAO,2HAAA,CAAA,UAAK,CAAC,IAAI,CAAC,MAAM,GAAG;AAC7B;AAKO,SAAS;IACd,OAAO,2HAAA,CAAA,UAAK,CAAC,SAAS,CAAC,UAAU,CAAC,eAAe;AACnD","debugId":null}},
    {"offset": {"line": 213, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/mellow/Documents/Heal-Application-main/Heal-Application-main/src/app/api/user/profile/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { adminAuth, adminDb } from '@/lib/firebaseAdmin';\r\n\r\nexport async function GET(request: NextRequest) {\r\n  try {\r\n    console.log('=== Get User Profile API Called ===');\r\n\r\n    // Get authorization token\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      console.error('No authorization header');\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - No token provided' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const token = authHeader.split('Bearer ')[1];\r\n    \r\n    let decodedToken;\r\n    try {\r\n      decodedToken = await adminAuth.verifyIdToken(token);\r\n      console.log('Token verified for user:', decodedToken.uid);\r\n    } catch (error: any) {\r\n      console.error('Token verification failed:', error);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid or expired token' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = decodedToken.uid;\r\n\r\n    // Get user document from Firestore\r\n    console.log('Fetching user profile from Firestore...');\r\n    const userDoc = await adminDb.collection('users').doc(userId).get();\r\n\r\n    if (!userDoc.exists) {\r\n      console.error('User document not found:', userId);\r\n      return NextResponse.json(\r\n        { success: false, error: 'User profile not found' },\r\n        { status: 404 }\r\n      );\r\n    }\r\n\r\n    const userData = userDoc.data();\r\n    console.log('User profile found:', userData?.name);\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      id: userId,\r\n      name: userData?.name || '',\r\n      email: userData?.email || '',\r\n      phone: userData?.phone || '',\r\n      role: userData?.role || '',\r\n      department: userData?.department || '',\r\n      hospitalId: userData?.hospitalId || '',\r\n      status: userData?.status || 'active',\r\n      createdAt: userData?.createdAt,\r\n      updatedAt: userData?.updatedAt,\r\n    });\r\n  } catch (error: any) {\r\n    console.error('=== Error in Get User Profile API ===');\r\n    console.error('Error:', error);\r\n    console.error('Error message:', error.message);\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: error.message || 'Failed to fetch user profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// PUT: Update user profile\r\nexport async function PUT(request: NextRequest) {\r\n  try {\r\n    console.log('=== Update User Profile API Called ===');\r\n\r\n    // Get authorization token\r\n    const authHeader = request.headers.get('Authorization');\r\n    if (!authHeader || !authHeader.startsWith('Bearer ')) {\r\n      console.error('No authorization header');\r\n      return NextResponse.json(\r\n        { success: false, error: 'Unauthorized - No token provided' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const token = authHeader.split('Bearer ')[1];\r\n    \r\n    let decodedToken;\r\n    try {\r\n      decodedToken = await adminAuth.verifyIdToken(token);\r\n      console.log('Token verified for user:', decodedToken.uid);\r\n    } catch (error: any) {\r\n      console.error('Token verification failed:', error);\r\n      return NextResponse.json(\r\n        { success: false, error: 'Invalid or expired token' },\r\n        { status: 401 }\r\n      );\r\n    }\r\n\r\n    const userId = decodedToken.uid;\r\n\r\n    const body = await request.json();\r\n    console.log('Update body received');\r\n\r\n    const { name, phone } = body;\r\n\r\n    // Prepare update data (only allow updating certain fields)\r\n    const updateData: any = {\r\n      updatedAt: new Date().toISOString(),\r\n    };\r\n\r\n    if (name !== undefined) updateData.name = name.trim();\r\n    if (phone !== undefined) updateData.phone = phone.trim();\r\n\r\n    console.log('Updating user profile with fields:', Object.keys(updateData));\r\n\r\n    // Update user document\r\n    await adminDb.collection('users').doc(userId).update(updateData);\r\n\r\n    console.log('✅ User profile updated successfully');\r\n\r\n    return NextResponse.json({\r\n      success: true,\r\n      message: 'Profile updated successfully',\r\n    });\r\n  } catch (error: any) {\r\n    console.error('=== Error in Update User Profile API ===');\r\n    console.error('Error:', error);\r\n    console.error('Error message:', error.message);\r\n\r\n    return NextResponse.json(\r\n      { success: false, error: error.message || 'Failed to update profile' },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST() {\r\n  return NextResponse.json({ \r\n    success: false, \r\n    error: 'Method not allowed. Use GET to fetch or PUT to update.' \r\n  }, { status: 405 });\r\n}\r\n\r\nexport async function DELETE() {\r\n  return NextResponse.json({ \r\n    success: false, \r\n    error: 'Method not allowed.' \r\n  }, { status: 405 });\r\n}"],"names":[],"mappings":";;;;;;AAAA;AACA;AAAA;;;;;;;;AAEO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,0BAA0B;QAC1B,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAmC,GAC5D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,WAAW,KAAK,CAAC,UAAU,CAAC,EAAE;QAE5C,IAAI;QACJ,IAAI;YACF,eAAe,MAAM,6IAAA,CAAA,YAAS,CAAC,aAAa,CAAC;YAC7C,QAAQ,GAAG,CAAC,4BAA4B,aAAa,GAAG;QAC1D,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA2B,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,aAAa,GAAG;QAE/B,mCAAmC;QACnC,QAAQ,GAAG,CAAC;QACZ,MAAM,UAAU,MAAM,6IAAA,CAAA,UAAO,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,GAAG;QAEjE,IAAI,CAAC,QAAQ,MAAM,EAAE;YACnB,QAAQ,KAAK,CAAC,4BAA4B;YAC1C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAyB,GAClD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,WAAW,QAAQ,IAAI;QAC7B,QAAQ,GAAG,CAAC,uBAAuB,UAAU;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,IAAI;YACJ,MAAM,UAAU,QAAQ;YACxB,OAAO,UAAU,SAAS;YAC1B,OAAO,UAAU,SAAS;YAC1B,MAAM,UAAU,QAAQ;YACxB,YAAY,UAAU,cAAc;YACpC,YAAY,UAAU,cAAc;YACpC,QAAQ,UAAU,UAAU;YAC5B,WAAW,UAAU;YACrB,WAAW,UAAU;QACvB;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,kBAAkB,MAAM,OAAO;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAA+B,GACzE;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,IAAI,OAAoB;IAC5C,IAAI;QACF,QAAQ,GAAG,CAAC;QAEZ,0BAA0B;QAC1B,MAAM,aAAa,QAAQ,OAAO,CAAC,GAAG,CAAC;QACvC,IAAI,CAAC,cAAc,CAAC,WAAW,UAAU,CAAC,YAAY;YACpD,QAAQ,KAAK,CAAC;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAAmC,GAC5D;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,QAAQ,WAAW,KAAK,CAAC,UAAU,CAAC,EAAE;QAE5C,IAAI;QACJ,IAAI;YACF,eAAe,MAAM,6IAAA,CAAA,YAAS,CAAC,aAAa,CAAC;YAC7C,QAAQ,GAAG,CAAC,4BAA4B,aAAa,GAAG;QAC1D,EAAE,OAAO,OAAY;YACnB,QAAQ,KAAK,CAAC,8BAA8B;YAC5C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,SAAS;gBAAO,OAAO;YAA2B,GACpD;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,SAAS,aAAa,GAAG;QAE/B,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,QAAQ,GAAG,CAAC;QAEZ,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;QAExB,2DAA2D;QAC3D,MAAM,aAAkB;YACtB,WAAW,IAAI,OAAO,WAAW;QACnC;QAEA,IAAI,SAAS,WAAW,WAAW,IAAI,GAAG,KAAK,IAAI;QACnD,IAAI,UAAU,WAAW,WAAW,KAAK,GAAG,MAAM,IAAI;QAEtD,QAAQ,GAAG,CAAC,sCAAsC,OAAO,IAAI,CAAC;QAE9D,uBAAuB;QACvB,MAAM,6IAAA,CAAA,UAAO,CAAC,UAAU,CAAC,SAAS,GAAG,CAAC,QAAQ,MAAM,CAAC;QAErD,QAAQ,GAAG,CAAC;QAEZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YACvB,SAAS;YACT,SAAS;QACX;IACF,EAAE,OAAO,OAAY;QACnB,QAAQ,KAAK,CAAC;QACd,QAAQ,KAAK,CAAC,UAAU;QACxB,QAAQ,KAAK,CAAC,kBAAkB,MAAM,OAAO;QAE7C,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,SAAS;YAAO,OAAO,MAAM,OAAO,IAAI;QAA2B,GACrE;YAAE,QAAQ;QAAI;IAElB;AACF;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,OAAO;IACT,GAAG;QAAE,QAAQ;IAAI;AACnB;AAEO,eAAe;IACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;QACvB,SAAS;QACT,OAAO;IACT,GAAG;QAAE,QAAQ;IAAI;AACnB","debugId":null}}]
}